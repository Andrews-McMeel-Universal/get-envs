name: Retrieve Secrets from Azure KeyVault

description: Generates an environment variable file with Azure Key Vault secrets

inputs:
  azurecredentials:
    description: "Credentials to login to Azure"
    required: true
  environmentKeyVault:
    description: "Azure Key Vault Name"
    required: false
  repositoryName:
    required: false
    description: "GitHub Repository Name."
    default: ${{ github.event.repository.name }}
  environment:
    required: false
    description: "Deployment environment"
  setBuildArguments:
    required: false
    description: "Only retrieve secrets with the 'BuildArg' ContentType."
    default: "false"
  addBuildArgPredicate:
    required: false
    description: "Add --build-arg predicate before each build arg"
    default: "false"

branding:
  color: purple
  icon: unlock

runs:
  using: "composite"
  steps:
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: "${{ inputs.azurecredentials }}"

    - name: Generate .env file from Azure Key Vaults
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        REPOSITORY_NAME="${{ inputs.repositoryName }}"
        ENV_KEYVAULT_NAME="${{ inputs.environmentKeyVault }}"
        SET_BUILD_ARGS="${{ inputs.setBuildArguments }}"
        ADD_BUILD_ARG_PREDICATE="${{ inputs.addBuildArgPredicate }}"

        DARKGRAY="\033[38;5;232m"
        RED="\033[0;31m"
        YELLOW="\033[0;33m"
        NC="\033[0m" # No Color

        # # If ENV_KEYVAULT_NAME is empty, search for key vault using tags
        if [ -z "${ENV_KEYVAULT_NAME}" ]; then
            # Search for key vault using tags
            echo -e "${DARKGRAY}Searching for key vault with tags: \"repository-name=${REPOSITORY_NAME};environment=${ENVIRONMENT}\"${NC}"

            # Initialize a counter
            COUNTER=1

            # Try the command up to 5 times
            while [[ "${COUNTER}" -lt 6 ]]; do
                # Break loop if command is successful
                if KEYVAULT_NAME=$(az keyvault list --query "[?tags.\"repository-name\" == '${REPOSITORY_NAME}' && tags.environment == '${ENVIRONMENT}'].name" --output tsv); then
                    break
                fi

                # Display retry attempt and increment the COUNTER
                echo -e "${YELLOW}Retrieval of the key vault failed on attempt ${COUNTER} of 5. Waiting 5 seconds before trying again.${NC}"
                COUNTER=$((COUNTER+1))

                # Exit with error after 5 failed attempts
                if [[ "${COUNTER}" -eq 6 ]]; then
                    echo -e "${RED}Failed to list key vaults after 5 attempts. Please confirm this repository's key vaults are tagged correctly.${NC}"
                    exit 1
                fi

                # Pause before next attempt
                sleep 5
            done
        else
            # If ENV_KEYVAULT_NAME is not empty, use it as the key vault name
            KEYVAULT_NAME="${ENV_KEYVAULT_NAME}"
        fi

        # Get key vault object
        KEYVAULT=$(az keyvault list --query "[?name == '${KEYVAULT_NAME}']" )

        # Check if key vault exists
        if ! echo "${KEYVAULT}" | grep -Eq "\w"; then
            echo -e "${RED}Invalid value provided for 'KeyVaultName'. Please confirm a Key Vault exists under the name specified. Value provided: ${NC}${KEYVAULT_NAME}"
            exit 1
        fi
        KEYVAULT_NAME=${KEYVAULT_NAME// /}
        echo "::notice::KeyVaultName: ${KEYVAULT_NAME}"

        # Set secrets list
        if "${SET_BUILD_ARGS}" ; then
            SECRETS=$(az keyvault secret list --vault-name "${KEYVAULT_NAME}" --query "[?contentType == 'BuildArg Env' || contentType == 'BuildArg'].name" --output tsv)
        else
            SECRETS=$(az keyvault secret list --vault-name "${KEYVAULT_NAME}" --query "[].name" --output tsv)
        fi

        # Loop through secrets and add them to .env
        if echo "${SECRETS}" | grep -Eq "\w"; then
            while IFS= read -r SECRET; do
                # Convert to upper case snake case and remove quotes
                SECRET_NAME=$(echo "${SECRET}" | tr '[:upper:][:lower:]' '[:lower:][:upper:]' | tr "-" "_" | tr -d '"')

                # Get secret value and set it to the secret name
                SECRET_VALUE=$(az keyvault secret show --vault-name "${KEYVAULT_NAME}" -n "${SECRET}" --query "value" --output tsv)

                # Break loop if secret name or value is empty
                if [[ -z "${SECRET_NAME}" ]] || [[ -z "${SECRET_VALUE}" ]]; then
                    continue
                fi

                # Add secret
                if "${SET_BUILD_ARGS}"; then
                    if "${ADD_BUILD_ARG_PREDICATE}"; then
                        BUILDARGS="${BUILDARGS} --build-arg ${SECRET_NAME}=${SECRET_VALUE}"
                    else
                        BUILDARGS="${BUILDARGS} \
                        ${SECRET_NAME}=${SECRET_VALUE}"
                    fi
                else
                    echo "${SECRET_NAME}=${SECRET_VALUE}" >> "${{ github.workspace }}/.env"
                fi
            done < <(echo "${SECRETS[*]}")
        else
            echo "" >> "${{ github.workspace }}/.env"
        fi
        if "${SET_BUILD_ARGS}" ; then
            echo "buildArguments=${BUILDARGS}" >> $GITHUB_ENV
        fi

    - name: Source secrets file
      if: ${{ inputs.setBuildArguments != 'true' }}
      shell: sh
      run: |
        while read -r envVar; do
            if [ $(echo "${envVar}" | grep -Ei "SECRET|TOKEN|KEY|PASS|CONNECTION_STRING") ]; then
              VAR=$(echo "${envVar}" | awk -F '=' '{print $1}')
              VALUE=$(echo $envVar | sed "s/$VAR=//g")
              echo "::add-mask::$VALUE"
            fi
            echo "$envVar" >> $GITHUB_ENV
        done < ${{ github.workspace }}/.env
