name: Cache Envs from Azure KeyVault

description: Generates and caches a env file

inputs:
  azurecredentials:
    description: "Credentials to login to Azure"
    required: true
  environmentKeyVault:
    description: "Azure Key Vault Name"
    required: false
  repositoryName:
    required: false
    description: "GitHub Repository Name."
    default: ${{ github.event.repository.name }}
  environment:
    required: false
    description: "Deployment environment"

branding:
  color: purple
  icon: unlock
runs:
  using: "composite"
  steps:
    # Caches the app's environment variables, breaks cache when the Secrets.json.gpg file is updated
    # - name: Cache Azure Key Vault Secrets
    #   id: secrets-cache
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ${{ github.workspace }}/.env
    #     key: envs-${{ inputs.environment }}-${{ hashFiles('**/*.gpg','**/*.ps1','**/Chart.yaml') }}

    # Gets the environment variables if the cache is broken
    - name: Login via Az module
      # if: steps.secrets-cache.outputs.cache-hit != 'true'
      uses: azure/login@v1.4.7
      with:
        creds: "${{ inputs.azurecredentials }}"
        enable-AzPSSession: true

    - name: Generate .env file from Azure Key Vaults
      # if: steps.secrets-cache.outputs.cache-hit != 'true'
      uses: azure/powershell@v1.2.0
      with:
        inlineScript: |
          $environment = "${{ inputs.environment }}"
          $repositoryName = "${{ inputs.repositoryName }}"

          if ("${{ inputs.environmentKeyVault }}") {
              $KeyVaultName = "${{ inputs.environmentKeyVault }}"
          }
          else {
              $KeyVaultName = (Get-AzKeyVault -Tag @{"environment" = "$environment" } | Get-AzKeyVault -Tag @{"repository-name" = "$repositoryName" }).VaultName
          }

          [String]$KeyVaultName = $KeyVaultName.Replace(" ", "")
          Write-Output "::notice::KeyVaultName: $KeyVaultName"
          $envSecrets = (Get-AzKeyVaultSecret -VaultName $KeyVaultName  | Where-Object { ($_.ContentType -contains 'Env') -or ($_.ContentType -contains 'BuildArg Env') }).Name
          if ($envSecrets) {
            $envSecrets | ForEach-Object {
                $envName = $_.ToUpper().Replace("-", "_")
                $envSecret = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_).secretvalue | ConvertFrom-SecureString -AsPlainText
                $envContent = $envName + "=" + $envSecret
                Add-Content -Path "${{ github.workspace }}/.env" -Value $envContent
            }
          }
          else {
            Add-Content -Path "${{ github.workspace }}/.env" ""
          }
        azPSVersion: "latest"

    - name: Source secrets file
      shell: sh
      run: |
        while read -r envVar; do
            if [ $(echo "${envVar}" | grep -Ei "SECRET|TOKEN|KEY|PASS|CONNECTION_STRING") ]; then
              VAR=$(echo "${envVar}" | awk -F '=' '{print $1}')
              VALUE=$(echo $envVar | sed "s/$VAR=//g")
              echo "::add-mask::$VALUE"
            fi
            echo "$envVar" >> $GITHUB_ENV
        done < ${{ github.workspace }}/.env
