name: Retrieve Secrets from Azure KeyVault

description: Generates an environment variable file with Azure Key Vault secrets

inputs:
  azurecredentials:
    description: "Credentials to login to Azure"
    required: true
  environmentKeyVault:
    description: "Azure Key Vault Name"
    required: false
  repositoryName:
    required: false
    description: "GitHub Repository Name."
    default: ${{ github.event.repository.name }}
  environment:
    required: false
    description: "Deployment environment"

branding:
  color: purple
  icon: unlock

runs:
  using: "composite"
  steps:
    - name: Check if Azure Credentials Exist
      id: azure-credentials
      shell: bash
      run: |
        if [[ $(ls ~/.Azure/ || ls ${{ github.workspace }}/.Azure/) ]] ; then
          echo "azure-credentials-exist='true'" >> $GITHUB_OUTPUT
          echo "Azure Credentials exist on file system"
        else
          echo "azure-credentials-exist='false'" >> $GITHUB_OUTPUT
          echo "Azure credentials do not exist on file system"
        fi

    - name: Login to Azure
      if: steps.azure-credentials.outputs.azure-credentials-exist == 'true'
      uses: Andrews-McMeel-Universal/cache-azure-login@v1
      with:
        azureCredentials: "${{ inputs.azurecredentials }}"

    - name: Generate .env file from Azure Key Vaults
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $environment = "${{ inputs.environment }}"
          $repositoryName = "${{ inputs.repositoryName }}"
          $environmentKeyVault = "${{ inputs.environmentKeyVault }}"

          # Check if searching for key vaults by repository name or otherwise, if key vault name argument is given
          if (!$environmentKeyVault) {
            # Search for key vault using tags
            Write-Host "Searching for key vault with tags: 'repository-name=$repositoryName;environment=$environment'" -ForegroundColor DarkGray
            $KeyVaultName = (Get-AzKeyVault -Tag @{"environment" = "$environment" } | Get-AzKeyVault -Tag @{"repository-name" = "$repositoryName" }).VaultName

            # Check if key vault name is empty
            if (!$KeyVaultName) {
                Write-Error "Key vault name cannot be found. Please confirm this repository's key vaults are tagged correctly."
                return
            }
          }
          else {
            $KeyVaultName = $environmentKeyVault
          }

          # Get key vault object
          $KeyVault = Get-AzKeyVault -Name "$KeyVaultName"

          # Check if key vault exists
          if (!$KeyVault) {
              Write-Error "Invalid value provided for 'KeyVaultName'. Please confirm a Key Vault exists under the name specified. Value provided: $KeyVaultName"
              return
          }
          [String]$KeyVaultName = $KeyVaultName.Replace(" ", "")
          Write-Output "::notice::KeyVaultName: $KeyVaultName"

          # Set secrets list
          $Secrets = (Get-AzKeyVaultSecret -VaultName "$KeyVaultName").Name

          # Loop through secrets and add them to .env
          if ($Secrets) {
            $Secrets | ForEach-Object {
              # Convert to upper case snake case and remove quotes
              $SecretName = $_.ToUpper().Replace("-", "_").Replace("`"", "")

              # Get secret value and set it to the secret name
              $SecretValue = (Get-AzKeyVaultSecret -VaultName "$KeyVaultName" -Name $_).SecretValue | ConvertFrom-SecureString -AsPlainText

              # Add secret to file
              Add-Content -Path "${{ github.workspace }}/.env" -Value "$SecretName=$SecretValue"
            }
          }
          else {
            Add-Content -Path "${{ github.workspace }}/.env" ""
          }
        azPSVersion: "latest"

    - name: Source secrets file
      shell: sh
      run: |
        while read -r envVar; do
            if [ $(echo "${envVar}" | grep -Ei "SECRET|TOKEN|KEY|PASS|CONNECTION_STRING") ]; then
              VAR=$(echo "${envVar}" | awk -F '=' '{print $1}')
              VALUE=$(echo $envVar | sed "s/$VAR=//g")
              echo "::add-mask::$VALUE"
            fi
            echo "$envVar" >> $GITHUB_ENV
        done < ${{ github.workspace }}/.env
