name: Retrieve Secrets from Azure KeyVault

description: Generates an environment variable file with Azure Key Vault secrets

inputs:
  azurecredentials:
    description: "Credentials to login to Azure"
    required: true
  environmentKeyVault:
    description: "Azure Key Vault Name"
    required: false
  repositoryName:
    required: false
    description: "GitHub Repository Name."
    default: ${{ github.event.repository.name }}
  environment:
    required: false
    description: "Deployment environment"

branding:
  color: purple
  icon: unlock

runs:
  using: "composite"
  steps:
    - name: Login to Azure
      uses: Andrews-McMeel-Universal/cache-azure-login@v1
      with:
        azureCredentials: "${{ inputs.azurecredentials }}"
        enable-AzPsSession: false

    - name: Generate .env file from Azure Key Vaults
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        REPOSITORY_NAME="${{ inputs.repositoryName }}"
        ENV_KEYVAULT_NAME="${{ inputs.environmentKeyVault }}"

        DARKGRAY='\e[38;5;232m'
        RED='\e[0;31m'

        # Check if searching for key vaults by repository name or otherwise, if key vault name argument is given
        if [ -z "${ENV_KEYVAULT_NAME}" ]; then
            # Search for key vault using tags
            echo -e "${DARKGRAY}Searching for key vault with tags: \"repository-name=${REPOSITORY_NAME};environment=${ENVIRONMENT}\""
            KEYVAULT_NAME=$(az keyvault list --query "[?tags.\"repository-name\" == '${REPOSITORY_NAME}' && tags.environment == '${ENVIRONMENT}'].name" --output tsv)

            # Check if key vault name is empty
            if [ -z "${KEYVAULT_NAME}" ]; then
                echo -e "${RED}Key vault name cannot be found. Please confirm this repository's key vaults are tagged correctly."
                exit 1
            fi
        else
            KEYVAULT_NAME="${ENV_KEYVAULT_NAME}"
        fi

        # Get key vault object
        KEYVAULT=$(az keyvault list --query "[?name == '${KEYVAULT_NAME}']" )

        # Check if key vault exists
        if ! echo "${KEYVAULT}" | grep -Eq "\w"; then
            echo -e "${RED}Invalid value provided for 'KeyVaultName'. Please confirm a Key Vault exists under the name specified. Value provided: ${KEYVAULT_NAME}"
            exit 1
        fi
        KEYVAULT_NAME=${KEYVAULT_NAME// /}
        echo "::notice::KeyVaultName: ${KEYVAULT_NAME}"

        # Set secrets list
        SECRETS=$(az keyvault secret list --vault-name "${KEYVAULT_NAME}" --query "[].name" --output tsv)

        # Loop through secrets and add them to .env
        if echo "${SECRETS}" | grep -Eq "\w"; then
            while IFS= read -r SECRET; do
                # Convert to upper case snake case and remove quotes
                SECRET_NAME=$(echo "${SECRET}" | tr '[:upper:][:lower:]' '[:lower:][:upper:]' | tr "-" "_" | tr -d '"')

                # Get secret value and set it to the secret name
                SECRET_VALUE=$(az keyvault secret show --vault-name "${KEYVAULT_NAME}" -n "${SECRET}" --query "value" --output tsv)

                # Add secret to file
                echo "${SECRET_NAME}=${SECRET_VALUE}" >> "${{ github.workspace }}/.env"
            done < <(echo "${SECRETS[*]}")
        else
            echo "" >> "${{ github.workspace }}/.env"
        fi

    - name: Source secrets file
      shell: sh
      run: |
        while read -r envVar; do
            if [ $(echo "${envVar}" | grep -Ei "SECRET|TOKEN|KEY|PASS|CONNECTION_STRING") ]; then
              VAR=$(echo "${envVar}" | awk -F '=' '{print $1}')
              VALUE=$(echo $envVar | sed "s/$VAR=//g")
              echo "::add-mask::$VALUE"
            fi
            echo "$envVar" >> $GITHUB_ENV
        done < ${{ github.workspace }}/.env
