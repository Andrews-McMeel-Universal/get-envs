name: Retrieve Secrets from Azure KeyVault

description: Generates an environment variable file with Azure Key Vault secrets

inputs:
  azurecredentials:
    description: "Credentials to login to Azure"
    required: true
  environmentKeyVault:
    description: "Azure Key Vault Name"
    required: false
  repositoryName:
    required: false
    description: "GitHub Repository Name."
    default: ${{ github.event.repository.name }}
  environment:
    required: false
    description: "Deployment environment"
  contentTypes:
    required: false
    description: "Space-separated list of contentTypes to retrieve"
  excludeContentTypes:
    required: false
    description: "Space-separated list of contentTypes to ignore"

branding:
  color: purple
  icon: unlock

runs:
  using: "composite"
  steps:
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: "${{ inputs.azurecredentials }}"

    - name: Generate .env file from Azure Key Vaults
      id: get-envs
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        REPOSITORY_NAME="${{ inputs.repositoryName }}"
        ENV_KEYVAULT_NAME="${{ inputs.environmentKeyVault }}"
        CONTENT_TYPES="${{ inputs.contentTypes }}"
        EXCLUDE_CONTENT_TYPES="${{ inputs.excludeContentTypes }}"
        FILE="${{ github.workspace }}/.env"

        # If ENV_KEYVAULT_NAME is empty, search for key vault using tags
        if [ -n "${ENV_KEYVAULT_NAME}" ]; then
            # If ENV_KEYVAULT_NAME is not empty, use it as the key vault name
            KEYVAULT_NAME="${ENV_KEYVAULT_NAME}"
        else
            # Search for key vault using tags
            echo -e "Searching for key vault with tags: \"repository-name=${REPOSITORY_NAME};environment=${ENVIRONMENT}\""
            KEYVAULT_NAME=$(az keyvault list --query "[?tags.\"repository-name\" == '${REPOSITORY_NAME}' && tags.environment == '${ENVIRONMENT}'].name" --output tsv)
        fi

        # Get key vault object
        KEYVAULT_NAME=${KEYVAULT_NAME// /}
        KEYVAULT=$(az keyvault list --query "[?name == '${KEYVAULT_NAME}']" )

        # Check if key vault exists
        if ! echo "${KEYVAULT}" | grep -Eq "\w"; then
            echo -e "Invalid value provided for 'KeyVaultName'. Please confirm a Key Vault exists under the name specified. Value provided: ${KEYVAULT_NAME}"
            exit 1
        fi

        # Set secrets list
        echo "Retrieving list of secrets for key vault: ${KEYVAULT_NAME}"
        SECRETS=()
        if [[ -z "${CONTENT_TYPES}" ]]; then
            # shellcheck disable=SC2207
            SECRETS=($(az keyvault secret list --vault-name "${KEYVAULT_NAME}" --query "[].name" --output tsv))
        else
            for CONTENT_TYPE in ${CONTENT_TYPES}; do
                SECRET_LIST=$(az keyvault secret list --vault-name "${KEYVAULT_NAME}" --query "[?contains(contentType, '${CONTENT_TYPE}')].name" --output tsv)
                while read -r SECRET; do
                    SECRETS+=("${SECRET}")
                done <<< "${SECRET_LIST}"
            done
        fi

        # Remove duplicates
        SECRET_LIST=()
        for SECRET in "${SECRETS[@]}"; do
          if [[ ! " ${SECRET_LIST[*]} " =~ ${SECRET} ]]; then
            SECRET_LIST+=("${SECRET}")
          fi
        done
        SECRETS=("${SECRET_LIST[@]}")

        # Loop through secrets and add them to ${FILE}
        echo "Retrieving secrets for key vault: ${KEYVAULT_NAME}"
        if echo "${SECRETS[*]}" | grep -E "\w" > /dev/null; then
            for SECRET in "${SECRETS[@]}"; do
                # Convert to upper case snake case and remove quotes
                SECRET_NAME=$(echo "${SECRET}" | tr '[:upper:][:lower:]' '[:lower:][:upper:]' | tr "-" "_" | tr -d '"')

                # Retrieve all properties of the secret
                SECRET_OBJECT=$(az keyvault secret show --vault-name "${KEYVAULT_NAME}" -n "${SECRET}" --output tsv)

                # Get secret content type
                SECRET_CONTENT_TYPE=$(echo "${SECRET_OBJECT}" | awk -F "\t" '{print $2}')

                # Get secret value and set it to the secret name
                SECRET_VALUE=$(echo "${SECRET_OBJECT}" | awk -F "\t" '{print $8}')

                # Add secret
                if ! [[ "${SECRET_CONTENT_TYPE}" =~ ${EXCLUDE_CONTENT_TYPES} ]]; then
                    echo "Retrieving secret: ${SECRET_NAME}"
                    if [[ "${SECRET_CONTENT_TYPE}" == *"BuildArg"* ]]; then
                        BUILD_ARGUMENTS="${BUILD_ARGUMENTS} --build-arg ${SECRET_NAME}=${SECRET_VALUE}"
                    fi
                    if [[ "${SECRET_CONTENT_TYPE}" =~ "Env" ]] || [[ "${SECRET_CONTENT_TYPE}" =~ "Key" ]]; then
                        ENVIRONMENT_VARIABLES+="${SECRET_NAME}=${SECRET_VALUE} "
                        echo "${SECRET_NAME}=${SECRET_VALUE}" >> ${FILE}
                    fi
                fi
            done
        else
            echo "" >> ${FILE}
        fi

        if [[ "${CONTENT_TYPES}" == *"BuildArg"* ]]; then
            echo "Build arguments have been added to 'buildArguments' output"
            echo "buildArguments=${BUILD_ARGUMENTS}" >> $GITHUB_OUTPUT
        fi
        if [[ -z "${CONTENT_TYPES}" ]] || [[ "${CONTENT_TYPES}" == *"Env"* ]] || [[ "${CONTENT_TYPES}" == *"Key"* ]]; then
            echo "Environment variables have been added to 'environmentVariables' output"
            echo "environmentVariables=${ENVIRONMENT_VARIABLES}" >> $GITHUB_OUTPUT
        fi

    - name: Source secrets file
      if: ${{ inputs.setBuildArguments != 'true' }}
      shell: sh
      run: |
        while read -r envVar; do
            if [ $(echo "${envVar}" | grep -Ei "SECRET|TOKEN|KEY|PASS|CONNECTION_STRING") ]; then
              VAR=$(echo "${envVar}" | awk -F '=' '{print $1}')
              VALUE=$(echo $envVar | sed "s/$VAR=//g")
              echo "::add-mask::$VALUE"
            fi
            echo "$envVar" >> $GITHUB_ENV
        done < ${{ github.workspace }}/.env

outputs:
  environmentVariables:
    value: ${{ steps.get-envs.outputs.environmentVariables }}
    description: "List of environment variables retrieved from key vault"
  buildArguments:
    value: ${{ steps.get-envs.outputs.buildArguments }}
    description: "List of build arguments retrieved from key vault"
